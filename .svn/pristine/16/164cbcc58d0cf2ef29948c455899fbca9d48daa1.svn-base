#include "TaskExecutor.h"
#include "dyncall.h"
#include "dynload.h"
#include <time.h>
#include  <stdio.h>
#include  <string.h>
#include    "../common/global_def.hpp"


TaskExecutor::TaskExecutor(void)
{
}


TaskExecutor::~TaskExecutor(void)
{
}


void TaskExecutor::setTaskBegin(){
  /*  m_task.pid = pid;*/
    m_task.status = RUNNING;
    //m_task.mpiPid = rank;
    //strcpy(m_task.host, host);

    struct tm *p; 
    time_t timep;
    time(&timep);
    p = gmtime(&timep);
    sprintf(m_task.beginTime,"%d%.2d%.2d%.2d%.2d%.2d.000",(1900+p->tm_year),
            (1+p->tm_mon),p->tm_mday,p->tm_hour,p->tm_min,
            p->tm_sec);
}

void TaskExecutor::setTaskEnd(int ret){
  /*  m_task.pid = pid;*/
	if( ret == 1){
		m_task.status = FINISHED;
	}else {
		m_task.status = FAILED;
	}
    //m_task.mpiPid = rank;
    //strcpy(m_task.host, host);

    struct tm *p; 
    time_t timep;
    time(&timep);
    p = gmtime(&timep);
    sprintf(m_task.endTime,"%d%.2d%.2d%.2d%.2d%.2d.000",(1900+p->tm_year),
            (1+p->tm_mon),p->tm_mday,p->tm_hour,p->tm_min,
            p->tm_sec);
}

void TaskExecutor::run()
{
    //int pid = fork();
    //if(pid == 0)
    //{
        //alg(m_task);
    //}else{
        //waitpid(pid,&status);
        
    //}

	int ret;
	setTaskBegin();
	emit signalSendResult2Cont(m_task);
	ret = alg(m_task);
	setTaskEnd(ret);
    idebug("%s\n",m_task.taskInfo.retValue);
	emit signalSendResult2Cont(m_task);
}

int TaskExecutor::alg(Task &t)
{
	
    printf ( "libName = %s\n",t.taskInfo.libName);

    DLLib *l = dlLoadLibrary(t.taskInfo.libName);
    if(l == NULL){
        printf("l is NULL\n");
        return -1;
    }


    char* ret_c; short* ret_S; int* ret_i; long* ret_l;
    long long* ret_L; char* ret_s; float* ret_f; double* ret_d;

    printf ( "funName = %s\n",t.taskInfo.funName);
    if(strcmp(t.taskInfo.funName,"")!=0){
        void* tf = dlFindSymbol(l, t.taskInfo.funName);
        if(tf == NULL){
            fprintf ( stderr, "function %s not found!\n", t.taskInfo.funName);
            return -1;
        }else{
            DCCallVM* vm = dcNewCallVM(4096);
            dcReset(vm);
            int j=0;
            int hasRet = 0;
            printf ( "paraType = %s\n",t.taskInfo.paraType );
            while(t.taskInfo.paraType[j]!=0){
                if(t.taskInfo.paraType[j] == ')') {
                    hasRet = 1;
                    break;
                }

                switch ( t.taskInfo.paraType[j] ) { // Types see Task.hpp
                    int k;
                    char c;

                    case 'i':
                        printf( "case i\n" );
                        k = c = 0;
                        while((c=t.taskInfo.paraValue[j][k++])!=0 ){
                            if(!isdigit(c)){
                                printf("paraValue[%d] should be int. but paraValue[%d] is %s\n",j, j, t.taskInfo.paraValue[j]);
                                return -1;
                            }
                        }
                        printf("paraValue[%d] = %d\n", j, atoi(t.taskInfo.paraValue[j]));
                        dcArgInt(vm, atoi(t.taskInfo.paraValue[j]));
                        break;

                    case 'f':
                        printf ( "case f\n" );
                        k = c = 0;
                        while((c=t.taskInfo.paraValue[j][k++])!=0){
                            if(!(isdigit(c) || c == 46)){
                                printf("paraValue[%d] should be float. but paraValue[%d] is %s\n",j, j, t.taskInfo.paraValue[j]);
                                return -1;
                            }
                        }
                        printf ( "paraValue[%d] = %f\n",j,atof(t.taskInfo.paraValue[j]) );
                        dcArgFloat(vm, atof(t.taskInfo.paraValue[j]));
                        break;

                    case 's':
                        printf ( "case s\n" );
                        printf ( "paraValue[%d] = %s\n",j,t.taskInfo.paraValue[j] );
                        dcArgPointer(vm, (DCpointer)t.taskInfo.paraValue[j]);
                        break;

                    case 'd':
                        printf ( "case d\n" );
                        k = c = 0;
                        while((c=t.taskInfo.paraValue[j][k++])!=0){
                            if(!(isdigit(c) || (c==46)) ){
                                printf("paraValue[%d] should be double. but paraValue[%d] is %s\n",j, j, t.taskInfo.paraValue[j]);
                                return -1;
                            }
                        }
                        printf ( "paraValue[%d] = %g\n",j,atof(t.taskInfo.paraValue[j]) );
                        dcArgDouble(vm, atof(t.taskInfo.paraValue[j]));
                        break;

                    //case 'b':
                        //printf( "case b\n" );
                        //char *s;
                        //s = t.taskInfo.paraValue[j];
                        //if(strcmp(s,"false")==0) dcArgBool(vm, 1);
                        //else if(strcmp(s,"true")==0) dcArgBool(vm, 0);
                        //else {
                            //printf("paraValue[%d] should be bool(false or true). but paraValue[%d] is %s\n",j, j, t.taskInfo.paraValue[j]);
                            //return -1;
                        //}
                        //break;

                    case 'c':
                        printf( "case c\n" );
                        k = c = 0;
                        if((c=t.taskInfo.paraValue[j][k++])!=0){
                            if(!(isalpha(c))){
                                printf("paraValue[%d] should be char. but paraValue[%d] is %s\n",j, j, t.taskInfo.paraValue[j]);
                                return -1;
                            }
                        }
                        dcArgChar(vm, c);
                        break;

                    case 'S':
                        printf( "case S\n" );
                        k = c = 0;
                        while((c=t.taskInfo.paraValue[j][k++])!=0 ){
                            if(!isdigit(c)){
                                printf("paraValue[%d] should be short. but paraValue[%d] is %s\n",j, j, t.taskInfo.paraValue[j]);
                                return -1;
                            }
                        }
                        printf("paraValue[%d] = %d\n", j, atoi(t.taskInfo.paraValue[j]));
                        dcArgShort(vm, (short)atoi(t.taskInfo.paraValue[j]));
                        break;
                    
                    case 'l':
                        printf( "case l\n" );
                        k = c = 0;
                        while((c=t.taskInfo.paraValue[j][k++])!=0 ){
                            if(!isdigit(c)){
                                printf("paraValue[%d] should be long. but paraValue[%d] is %s\n",j, j, t.taskInfo.paraValue[j]);
                                return -1;
                            }
                        }
                        printf("paraValue[%d] = %d\n", j, atol(t.taskInfo.paraValue[j]));
                        dcArgLong(vm, (long)atol(t.taskInfo.paraValue[j]));
                        break;

                    case 'L':
                        printf( "case L\n" );
                        k = c = 0;
                        while((c=t.taskInfo.paraValue[j][k++])!=0 ){
                            if(!isdigit(c)){
                                printf("paraValue[%d] should be long long. but paraValue[%d] is %s\n",j, j, t.taskInfo.paraValue[j]);
                                return -1;
                            }
                        }
                        printf("paraValue[%d] = %d\n", j, atol(t.taskInfo.paraValue[j]));
                        dcArgLongLong(vm, (long long)atol(t.taskInfo.paraValue[j]));
                        break;

                    case 'p':
                        printf ( "case p\n" );
                        //printf ( "paraValue[%d] = %s\n",j,t.taskInfo.paraValue[j] );
                        dcArgPointer(vm, (DCpointer)t.taskInfo.paraValue[j]);
                        break;

                    default:	
                        printf("unknown rtype '%c'", t.taskInfo.paraType[j]); 
                        return -1;
                        break;
                }  /* -----  end switch  ----- */
                j++;
            }
            // Call function in lib.
            
            if(hasRet == 0) {
                dcCallVoid(vm, tf);
            } else {
                j++;
                if(t.taskInfo.paraType[j]==0) dcCallVoid(vm, tf);
                while(t.taskInfo.paraType[j]!=0){
                    switch ( t.taskInfo.paraType[j] )
                    {
                        case 'v': dcCallVoid(vm, tf); break;
                        case 'c': 
                            ret_c = new char;
                            *ret_c = dcCallChar    (vm, tf); 
                            t.taskInfo.retValue = (char*)ret_c;
                            break;
                        case 'S': 
                            ret_S = new short;
                            *ret_S = dcCallShort   (vm, tf);
                            t.taskInfo.retValue = (char*)ret_S;
                            break;
                        case 'i': 
                            ret_i = new int;
                            *ret_i = dcCallInt     (vm, tf); 
                            t.taskInfo.setRetValue((char*)ret_i, sizeof(int));
                            idebug("%d\n", *ret_i);
                            delete ret_i;
                            break;
                        case 'l': 
                            ret_l = new long;
                            *ret_l = dcCallLong    (vm, tf); 
                            t.taskInfo.retValue = (char*)ret_l;
                            break;
                        case 'L': 
                            ret_L = new long long;
                            *ret_L = dcCallLongLong(vm, tf); 
                            t.taskInfo.retValue = (char*)ret_L;
                            break;
                        case 's': 
                            ret_s = (char*)dcCallPointer (vm, tf);
                            t.taskInfo.setRetValue(ret_s, strlen(ret_s)+1);
                            idebug("--------------%s\n", (char*)t.taskInfo.retValue);
                            break;
                        case 'f': 
                            ret_f = new float;
                            *ret_f = dcCallFloat   (vm, tf); 
                            t.taskInfo.retValue = (char*)ret_f;
                            break;
                        case 'd': 
                            ret_d = new double;
                            *ret_d = dcCallDouble  (vm, tf); 
                            t.taskInfo.retValue = (char*)ret_d;
                            break;
                        case 'p': 
                            ret_s = (char*)dcCallPointer (vm, tf);
                            //t.taskInfo.setRetValue(ret_s);
                            break;
                        default: 
                            printf("unknown rtype '%c'", t.taskInfo.paraType[j]); 
                            return -1;
                    }
                    j++;
                }
            }
            dcFree(vm);
        }
    }
    return 1;
}
